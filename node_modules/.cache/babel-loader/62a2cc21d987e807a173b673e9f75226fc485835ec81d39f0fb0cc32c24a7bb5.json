{"ast":null,"code":"'use strict';\n\n// See http://www.robvanderwoude.com/escapechars.php\nconst metaCharsRegExp = /([()\\][%!^\"`<>&|;, *?])/g;\nfunction escapeCommand(arg) {\n  // Escape meta chars\n  arg = arg.replace(metaCharsRegExp, '^$1');\n  return arg;\n}\nfunction escapeArgument(arg, doubleEscapeMetaChars) {\n  // Convert to string\n  arg = `${arg}`;\n\n  // Algorithm below is based on https://qntm.org/cmd\n  // It's slightly altered to disable JS backtracking to avoid hanging on specially crafted input\n  // Please see https://github.com/moxystudio/node-cross-spawn/pull/160 for more information\n\n  // Sequence of backslashes followed by a double quote:\n  // double up all the backslashes and escape the double quote\n  arg = arg.replace(/(?=(\\\\+?)?)\\1\"/g, '$1$1\\\\\"');\n\n  // Sequence of backslashes followed by the end of the string\n  // (which will become a double quote later):\n  // double up all the backslashes\n  arg = arg.replace(/(?=(\\\\+?)?)\\1$/, '$1$1');\n\n  // All other backslashes occur literally\n\n  // Quote the whole thing:\n  arg = `\"${arg}\"`;\n\n  // Escape meta chars\n  arg = arg.replace(metaCharsRegExp, '^$1');\n\n  // Double escape meta chars if necessary\n  if (doubleEscapeMetaChars) {\n    arg = arg.replace(metaCharsRegExp, '^$1');\n  }\n  return arg;\n}\nmodule.exports.command = escapeCommand;\nmodule.exports.argument = escapeArgument;","map":{"version":3,"names":["metaCharsRegExp","escapeCommand","arg","replace","escapeArgument","doubleEscapeMetaChars","module","exports","command","argument"],"sources":["D:/alumni-directory/node_modules/cross-spawn/lib/util/escape.js"],"sourcesContent":["'use strict';\n\n// See http://www.robvanderwoude.com/escapechars.php\nconst metaCharsRegExp = /([()\\][%!^\"`<>&|;, *?])/g;\n\nfunction escapeCommand(arg) {\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, '^$1');\n\n    return arg;\n}\n\nfunction escapeArgument(arg, doubleEscapeMetaChars) {\n    // Convert to string\n    arg = `${arg}`;\n\n    // Algorithm below is based on https://qntm.org/cmd\n    // It's slightly altered to disable JS backtracking to avoid hanging on specially crafted input\n    // Please see https://github.com/moxystudio/node-cross-spawn/pull/160 for more information\n\n    // Sequence of backslashes followed by a double quote:\n    // double up all the backslashes and escape the double quote\n    arg = arg.replace(/(?=(\\\\+?)?)\\1\"/g, '$1$1\\\\\"');\n\n    // Sequence of backslashes followed by the end of the string\n    // (which will become a double quote later):\n    // double up all the backslashes\n    arg = arg.replace(/(?=(\\\\+?)?)\\1$/, '$1$1');\n\n    // All other backslashes occur literally\n\n    // Quote the whole thing:\n    arg = `\"${arg}\"`;\n\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, '^$1');\n\n    // Double escape meta chars if necessary\n    if (doubleEscapeMetaChars) {\n        arg = arg.replace(metaCharsRegExp, '^$1');\n    }\n\n    return arg;\n}\n\nmodule.exports.command = escapeCommand;\nmodule.exports.argument = escapeArgument;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,MAAMA,eAAe,GAAG,0BAA0B;AAElD,SAASC,aAAaA,CAACC,GAAG,EAAE;EACxB;EACAA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAACH,eAAe,EAAE,KAAK,CAAC;EAEzC,OAAOE,GAAG;AACd;AAEA,SAASE,cAAcA,CAACF,GAAG,EAAEG,qBAAqB,EAAE;EAChD;EACAH,GAAG,GAAG,GAAGA,GAAG,EAAE;;EAEd;EACA;EACA;;EAEA;EACA;EACAA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAAC,iBAAiB,EAAE,SAAS,CAAC;;EAE/C;EACA;EACA;EACAD,GAAG,GAAGA,GAAG,CAACC,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC;;EAE3C;;EAEA;EACAD,GAAG,GAAG,IAAIA,GAAG,GAAG;;EAEhB;EACAA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAACH,eAAe,EAAE,KAAK,CAAC;;EAEzC;EACA,IAAIK,qBAAqB,EAAE;IACvBH,GAAG,GAAGA,GAAG,CAACC,OAAO,CAACH,eAAe,EAAE,KAAK,CAAC;EAC7C;EAEA,OAAOE,GAAG;AACd;AAEAI,MAAM,CAACC,OAAO,CAACC,OAAO,GAAGP,aAAa;AACtCK,MAAM,CAACC,OAAO,CAACE,QAAQ,GAAGL,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}